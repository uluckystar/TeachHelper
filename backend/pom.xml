<?xml version="1.0" encoding="UTF-8"?>
<!--
    TeachHelper 考试评估系统后端项目 POM 配置文件
    基于 Spring Boot 3.2.5 和 Spring AI 构建的智能考试评分系统
    
    主要功能:
    - AI 智能评分和评估
    - 题目管理和知识库系统
    - 用户认证和权限管理
    - 文档处理和OCR识别
    - 实时评分反馈
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 继承 Spring Boot 父项目，提供依赖管理和默认配置 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
        <relativePath/>
    </parent>

    <!-- 项目基本信息 -->
    <groupId>com.teachhelper</groupId>
    <artifactId>exam-evaluation-system</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>Exam Evaluation System</name>
    <description>AI-powered exam evaluation system using Spring Boot and Spring AI</description>

    <!-- 项目属性配置 -->
    <properties>
        <!-- Java 版本，使用 JDK 17 LTS 版本 -->
        <java.version>17</java.version>
        <!-- Spring AI 版本，用于 AI 功能集成 -->
        <spring-ai.version>1.0.0-SNAPSHOT</spring-ai.version>
        <!-- MapStruct 版本，用于 DTO 和实体类之间的映射 -->
        <mapstruct.version>1.5.5.Final</mapstruct.version>
        <!-- SpringDoc OpenAPI 版本，用于 API 文档生成 -->
        <springdoc.version>2.3.0</springdoc.version>
        <!-- Lombok 版本，简化 Java 代码编写 -->
        <lombok.version>1.18.34</lombok.version>
    </properties>

    <dependencies>
        <!-- ============ Spring Boot 核心启动器 ============ -->
        
        <!-- Web 启动器：提供 Spring MVC、Tomcat 等 Web 开发功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- JPA 启动器：提供 Hibernate、数据库访问等 ORM 功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Security 启动器：提供认证、授权等安全功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Validation 启动器：提供数据验证功能 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Actuator 启动器：提供监控和管理端点 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Cache 启动器：提供缓存抽象和支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <!-- WebSocket 启动器：提供实时通信功能，用于评分进度推送 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- ============ 开发工具和代码生成 ============ -->
        
        <!-- Lombok：通过注解自动生成 getter、setter、toString 等方法 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- ============ Spring AI 人工智能集成 ============ -->
        
        <!-- OpenAI 模型启动器：集成 OpenAI GPT 模型进行智能评分 -->
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-starter-model-openai</artifactId>
        </dependency>

        <!-- Ollama 模型启动器：集成本地 Ollama 模型进行 embedding -->
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-starter-model-ollama</artifactId>
        </dependency>

        <!-- 向量数据库支持：使用 PostgreSQL 的 pgvector 扩展存储向量数据 -->
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-starter-vector-store-pgvector</artifactId>
        </dependency>

        <!-- PDF 文档读取器：解析 PDF 格式的试卷和答案 -->
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-pdf-document-reader</artifactId>
            <version>${spring-ai.version}</version>
        </dependency>

        <!-- Tika 文档读取器：支持多种文档格式解析 -->
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-tika-document-reader</artifactId>
            <version>${spring-ai.version}</version>
        </dependency>

        <!-- ============ 数据库驱动 ============ -->
        
        <!-- H2 内存数据库：用于开发和测试环境 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- MySQL 数据库驱动：生产环境可选 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- PostgreSQL 数据库驱动：推荐用于生产环境，支持向量数据库功能 -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- ============ JWT 认证和授权 ============ -->
        
        <!-- JWT API：JSON Web Token 标准接口 -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.3</version>
        </dependency>

        <!-- JWT 实现：JWT 具体实现类 -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.3</version>
            <scope>runtime</scope>
        </dependency>

        <!-- JWT Jackson 集成：JSON 序列化支持 -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.12.3</version>
            <scope>runtime</scope>
        </dependency>

        <!-- ============ 对象映射和转换 ============ -->
        
        <!-- MapStruct：编译时生成 DTO 和实体类之间的映射代码 -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>

        <!-- ============ 容错和限流 ============ -->
        
        <!-- Resilience4j：提供断路器、重试、限流等容错机制 -->
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-spring-boot3</artifactId>
            <version>2.1.0</version>
        </dependency>

        <!-- ============ 文件处理工具 ============ -->
        
        <!-- Apache Commons CSV：CSV 文件读写支持 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.10.0</version>
        </dependency>

        <!-- Apache POI OOXML：Excel 文件处理 (.xlsx, .docx, .pptx) -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.4</version>
        </dependency>

        <!-- Apache POI 核心：基础 Office 文档处理 -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>5.2.4</version>
        </dependency>

        <!-- Apache POI Scratchpad：处理旧版 Office 文档 (.xls, .doc, .ppt) -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>5.2.4</version>
        </dependency>

        <!-- ============ PDF 和 OCR 处理 ============ -->
        
        <!-- PDFBox：PDF 文档创建、读取和操作 -->
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>3.0.1</version>
        </dependency>

        <!-- Tess4J：基于 Tesseract 的 OCR 文字识别，用于扫描试卷识别 -->
        <dependency>
            <groupId>net.sourceforge.tess4j</groupId>
            <artifactId>tess4j</artifactId>
            <version>5.8.0</version>
        </dependency>

        <!-- ============ API 文档生成 ============ -->
        
        <!-- SpringDoc OpenAPI：自动生成 API 文档和 Swagger UI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <!-- ============ 测试框架 ============ -->
        
        <!-- Spring Boot 测试启动器：包含 JUnit、Mockito、TestContainers 等 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Security 测试：安全模块的测试支持 -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- TestContainers PostgreSQL：集成测试时使用 Docker 容器运行 PostgreSQL -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- 依赖管理：统一管理依赖版本，避免版本冲突 -->
    <dependencyManagement>
        <dependencies>
            <!-- Spring AI BOM：管理所有 Spring AI 相关依赖的版本 -->
            <dependency>
                <groupId>org.springframework.ai</groupId>
                <artifactId>spring-ai-bom</artifactId>
                <version>${spring-ai.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- 构建配置 -->
    <build>
        <plugins>
            <!-- Spring Boot Maven 插件：用于打包和运行 Spring Boot 应用 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 排除 Lombok，因为它只在编译时需要 -->
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- Maven 编译插件：配置 Java 版本和注解处理器 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <!-- 源代码和目标 Java 版本 -->
                    <source>17</source>
                    <target>17</target>
                    <!-- 编译参数配置 -->
                    <parameters>true</parameters>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                    <!-- 注解处理器路径：编译时处理 Lombok 和 MapStruct 注解 -->
                    <annotationProcessorPaths>
                        <!-- Lombok 注解处理器：生成 getter、setter 等方法 -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <!-- MapStruct 注解处理器：生成对象映射代码 -->
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Maven 仓库配置：用于获取 Spring AI 的快照版本和里程碑版本 -->
    <repositories>
        <!-- Spring 里程碑仓库：获取 Spring 框架的测试版本 -->
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        
        <!-- Spring 快照仓库：获取 Spring 框架的开发版本 -->
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>

</project>
